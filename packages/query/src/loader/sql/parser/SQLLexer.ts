// Generated from src/loader/sql/grammar/SQLLexer.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class SQLLexer extends Lexer {
	public static readonly ID = 1;
	public static readonly OPEN_COMMENT = 2;
	public static readonly WORD = 3;
	public static readonly EOF_STATEMENT = 4;
	public static readonly WSL = 5;
	public static readonly STRING = 6;
	public static readonly PARAM_MARK = 7;
	public static readonly WS = 8;
	public static readonly TRANSFORM_ARROW = 9;
	public static readonly SPREAD = 10;
	public static readonly NAME_TAG = 11;
	public static readonly TYPE_TAG = 12;
	public static readonly OB = 13;
	public static readonly CB = 14;
	public static readonly COMMA = 15;
	public static readonly ANY = 16;
	public static readonly CLOSE_COMMENT = 17;
	public static readonly CAST = 18;
	public static readonly COMMENT = 1;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "COMMENT",
	];

	public static readonly ruleNames: string[] = [
		"QUOT", "ID", "OPEN_COMMENT", "SID", "WORD", "EOF_STATEMENT", "WSL", "STRING", 
		"PARAM_MARK", "CAST", "CID", "WS", "TRANSFORM_ARROW", "SPREAD", "NAME_TAG", 
		"TYPE_TAG", "OB", "CB", "COMMA", "ANY", "CLOSE_COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, "'/*'", undefined, "';'", undefined, undefined, 
		"':'", undefined, "'->'", "'...'", "'@name'", "'@param'", "'('", "')'", 
		"','", undefined, "'*/'", "'::'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "ID", "OPEN_COMMENT", "WORD", "EOF_STATEMENT", "WSL", "STRING", 
		"PARAM_MARK", "WS", "TRANSFORM_ARROW", "SPREAD", "NAME_TAG", "TYPE_TAG", 
		"OB", "CB", "COMMA", "ANY", "CLOSE_COMMENT", "CAST",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(SQLLexer._LITERAL_NAMES, SQLLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return SQLLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(SQLLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "SQLLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return SQLLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return SQLLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return SQLLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return SQLLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14\x90\b\x01" +
		"\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
		"\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
		"\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
		"\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x07\x033\n\x03\f\x03\x0E\x036\v\x03\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06" +
		"\x06\x06B\n\x06\r\x06\x0E\x06C\x03\x07\x03\x07\x03\b\x06\bI\n\b\r\b\x0E" +
		"\bJ\x03\b\x03\b\x03\t\x03\t\x03\t\x07\tR\n\t\f\t\x0E\tU\v\t\x03\t\x03" +
		"\t\x05\tY\n\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03" +
		"\f\x03\f\x03\r\x06\rg\n\r\r\r\x0E\rh\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12" +
		"\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x06\x15\x88\n\x15\r\x15" +
		"\x0E\x15\x89\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x04S\x89\x02\x02" +
		"\x17\x04\x02\x02\x06\x02\x03\b\x02\x04\n\x02\x02\f\x02\x05\x0E\x02\x06" +
		"\x10\x02\x07\x12\x02\b\x14\x02\t\x16\x02\x14\x18\x02\x02\x1A\x02\n\x1C" +
		"\x02\v\x1E\x02\f \x02\r\"\x02\x0E$\x02\x0F&\x02\x10(\x02\x11*\x02\x12" +
		",\x02\x13\x04\x02\x03\x07\x04\x02C\\c|\x06\x022;C\\aac|\x06\x02#(*;>]" +
		"_\x80\x05\x02\v\f\x0F\x0F\"\"\x03\x02^^\x02\x93\x02\b\x03\x02\x02\x02" +
		"\x02\n\x03\x02\x02\x02\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02" +
		"\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02" +
		"\x16\x03\x02\x02\x02\x03\x18\x03\x02\x02\x02\x03\x1A\x03\x02\x02\x02\x03" +
		"\x1C\x03\x02\x02\x02\x03\x1E\x03\x02\x02\x02\x03 \x03\x02\x02\x02\x03" +
		"\"\x03\x02\x02\x02\x03$\x03\x02\x02\x02\x03&\x03\x02\x02\x02\x03(\x03" +
		"\x02\x02\x02\x03*\x03\x02\x02\x02\x03,\x03\x02\x02\x02\x04.\x03\x02\x02" +
		"\x02\x060\x03\x02\x02\x02\b7\x03\x02\x02\x02\n<\x03\x02\x02\x02\fA\x03" +
		"\x02\x02\x02\x0EE\x03\x02\x02\x02\x10H\x03\x02\x02\x02\x12N\x03\x02\x02" +
		"\x02\x14Z\x03\x02\x02\x02\x16\\\x03\x02\x02\x02\x18a\x03\x02\x02\x02\x1A" +
		"f\x03\x02\x02\x02\x1Cl\x03\x02\x02\x02\x1Eo\x03\x02\x02\x02 s\x03\x02" +
		"\x02\x02\"y\x03\x02\x02\x02$\x80\x03\x02\x02\x02&\x82\x03\x02\x02\x02" +
		"(\x84\x03\x02\x02\x02*\x87\x03\x02\x02\x02,\x8B\x03\x02\x02\x02./\x07" +
		")\x02\x02/\x05\x03\x02\x02\x0204\t\x02\x02\x0213\t\x03\x02\x0221\x03\x02" +
		"\x02\x0236\x03\x02\x02\x0242\x03\x02\x02\x0245\x03\x02\x02\x025\x07\x03" +
		"\x02\x02\x0264\x03\x02\x02\x0278\x071\x02\x0289\x07,\x02\x029:\x03\x02" +
		"\x02\x02:;\b\x04\x02\x02;\t\x03\x02\x02\x02<=\x05\x06\x03\x02=>\x03\x02" +
		"\x02\x02>?\b\x05\x03\x02?\v\x03\x02\x02\x02@B\t\x04\x02\x02A@\x03\x02" +
		"\x02\x02BC\x03\x02\x02\x02CA\x03\x02\x02\x02CD\x03\x02\x02\x02D\r\x03" +
		"\x02\x02\x02EF\x07=\x02\x02F\x0F\x03\x02\x02\x02GI\t\x05\x02\x02HG\x03" +
		"\x02\x02\x02IJ\x03\x02\x02\x02JH\x03\x02\x02\x02JK\x03\x02\x02\x02KL\x03" +
		"\x02\x02\x02LM\b\b\x04\x02M\x11\x03\x02\x02\x02NX\x05\x04\x02\x02OY\x05" +
		"\x04\x02\x02PR\v\x02\x02\x02QP\x03\x02\x02\x02RU\x03\x02\x02\x02ST\x03" +
		"\x02\x02\x02SQ\x03\x02\x02\x02TV\x03\x02\x02\x02US\x03\x02\x02\x02VW\n" +
		"\x06\x02\x02WY\x05\x04\x02\x02XO\x03\x02\x02\x02XS\x03\x02\x02\x02Y\x13" +
		"\x03\x02\x02\x02Z[\x07<\x02\x02[\x15\x03\x02\x02\x02\\]\x07<\x02\x02]" +
		"^\x07<\x02\x02^_\x03\x02\x02\x02_`\b\v\x05\x02`\x17\x03\x02\x02\x02ab" +
		"\x05\x06\x03\x02bc\x03\x02\x02\x02cd\b\f\x03\x02d\x19\x03\x02\x02\x02" +
		"eg\t\x05\x02\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02" +
		"hi\x03\x02\x02\x02ij\x03\x02\x02\x02jk\b\r\x04\x02k\x1B\x03\x02\x02\x02" +
		"lm\x07/\x02\x02mn\x07@\x02\x02n\x1D\x03\x02\x02\x02op\x070\x02\x02pq\x07" +
		"0\x02\x02qr\x070\x02\x02r\x1F\x03\x02\x02\x02st\x07B\x02\x02tu\x07p\x02" +
		"\x02uv\x07c\x02\x02vw\x07o\x02\x02wx\x07g\x02\x02x!\x03\x02\x02\x02yz" +
		"\x07B\x02\x02z{\x07r\x02\x02{|\x07c\x02\x02|}\x07t\x02\x02}~\x07c\x02" +
		"\x02~\x7F\x07o\x02\x02\x7F#\x03\x02\x02\x02\x80\x81\x07*\x02\x02\x81%" +
		"\x03\x02\x02\x02\x82\x83\x07+\x02\x02\x83\'\x03\x02\x02\x02\x84\x85\x07" +
		".\x02\x02\x85)\x03\x02\x02\x02\x86\x88\v\x02\x02\x02\x87\x86\x03\x02\x02" +
		"\x02\x88\x89\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x89\x87\x03\x02\x02" +
		"\x02\x8A+\x03\x02\x02\x02\x8B\x8C\x07,\x02\x02\x8C\x8D\x071\x02\x02\x8D" +
		"\x8E\x03\x02\x02\x02\x8E\x8F\b\x16\x06\x02\x8F-\x03\x02\x02\x02\v\x02" +
		"\x034CJSXh\x89\x07\x04\x03\x02\t\x03\x02\b\x02\x02\t\x05\x02\x04\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!SQLLexer.__ATN) {
			SQLLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(SQLLexer._serializedATN));
		}

		return SQLLexer.__ATN;
	}

}

